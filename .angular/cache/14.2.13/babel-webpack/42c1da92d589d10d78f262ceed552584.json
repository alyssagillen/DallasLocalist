{"ast":null,"code":"import { Injectable, Inject, Directive, Renderer2, Input, ElementRef, NgModule } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { tap, filter } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nlet Gtag = /*#__PURE__*/(() => {\n  class Gtag {\n    /**\n     * @param {?} gaConfig\n     * @param {?} router\n     */\n    constructor(gaConfig, router) {\n      this.router = router;\n      this.mergedConfig = Object.assign({\n        trackPageviews: true\n      }, gaConfig);\n\n      if (this.mergedConfig.trackPageviews) {\n        router.events.pipe(filter(event => event instanceof NavigationEnd), tap(event => {\n          this.pageview();\n        })).subscribe();\n      }\n    }\n    /**\n     * @param {?} action\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    event(action, params = {}) {\n      // try/catch to avoid cross-platform issues\n      try {\n        gtag('event', action, params);\n        this.debug('event', this.mergedConfig.trackingId, action, params);\n      } catch (\n      /** @type {?} */\n      err) {\n        console.error('Google Analytics event error', err);\n      }\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    pageview(params) {\n      try {\n        const\n        /** @type {?} */\n        defaults = {\n          page_path: this.router.url,\n          page_title: 'Angular App',\n          page_location: window.location.href\n        };\n        params = Object.assign({}, defaults, params);\n        gtag('config', this.mergedConfig.trackingId, params);\n        this.debug('pageview', this.mergedConfig.trackingId, params);\n      } catch (\n      /** @type {?} */\n      err) {\n        console.error('Google Analytics pageview error', err);\n      }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n\n\n    config(params) {\n      try {\n        gtag('config', this.mergedConfig.trackingId, params = {});\n      } catch (\n      /** @type {?} */\n      err) {\n        console.error('Google Analytics config error', err);\n      }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n\n\n    set(params) {\n      try {\n        gtag('set', params = {});\n      } catch (\n      /** @type {?} */\n      err) {\n        console.error('Google Analytics set error', err);\n      }\n    }\n    /**\n     * @param {...?} msg\n     * @return {?}\n     */\n\n\n    debug(...msg) {\n      if (this.mergedConfig.debug) {\n        console.log('angular-gtag:', ...msg);\n      }\n    }\n\n  }\n\n  Gtag.ɵfac = function Gtag_Factory(t) {\n    return new (t || Gtag)(ɵngcc0.ɵɵinject('config'), ɵngcc0.ɵɵinject(ɵngcc1.Router));\n  };\n\n  Gtag.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Gtag,\n    factory: Gtag.ɵfac\n  });\n  /** @nocollapse */\n\n  return Gtag;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nlet GtagEventDirective = /*#__PURE__*/(() => {\n  class GtagEventDirective {\n    /**\n     * @param {?} gtag\n     * @param {?} renderer\n     * @param {?} el\n     */\n    constructor(gtag, renderer, el) {\n      this.gtag = gtag;\n      this.renderer = renderer;\n      this.el = el;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      try {\n        this.renderer.listen(this.el.nativeElement, this.trackOn, () => {\n          this.gtag.event(this.action || this.trackOn, Object.assign({\n            event_category: this.category\n          }, this.params));\n        });\n      } catch (\n      /** @type {?} */\n      err) {\n        console.error(err);\n      }\n    }\n\n  }\n\n  GtagEventDirective.ɵfac = function GtagEventDirective_Factory(t) {\n    return new (t || GtagEventDirective)(ɵngcc0.ɵɵdirectiveInject(Gtag), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  GtagEventDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: GtagEventDirective,\n    selectors: [[\"\", \"gtagEvent\", \"\"]],\n    inputs: {\n      trackOn: \"trackOn\",\n      action: \"action\",\n      category: \"category\",\n      params: \"params\"\n    }\n  });\n  /** @nocollapse */\n\n  return GtagEventDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nlet GtagModule = /*#__PURE__*/(() => {\n  class GtagModule {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    static forRoot(config) {\n      return {\n        ngModule: GtagModule,\n        providers: [Gtag, {\n          provide: 'config',\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  GtagModule.ɵfac = function GtagModule_Factory(t) {\n    return new (t || GtagModule)();\n  };\n\n  GtagModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: GtagModule\n  });\n  GtagModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return GtagModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GtagModule, {\n    declarations: [GtagEventDirective],\n    exports: [GtagEventDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Gtag, GtagEventDirective, GtagModule }; //# sourceMappingURL=angular-gtag.js.map","map":null,"metadata":{},"sourceType":"module"}